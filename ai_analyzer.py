import google.generativeai as genai
import logging
from typing import Optional, Dict
from config import GEMINI_API_KEY, AI_SETTINGS
from news_fetcher import NewsItem

logger = logging.getLogger(__name__)

class AIAnalyzer:
    def __init__(self):
        if GEMINI_API_KEY:
            genai.configure(api_key=GEMINI_API_KEY)
            self.model = genai.GenerativeModel(AI_SETTINGS['model'])
        else:
            logger.warning("Gemini API key t…ôyin edilm…ôyib")
            self.model = None
            
    def analyze_news(self, news_item: NewsItem) -> Optional[str]:
        """X…ôb…ôri AI il…ô analiz edir (sync)"""
        try:
            if not self.model:
                return self._fallback_analysis(news_item)
            
            # X…ôb…ôr m…ôzmununu hazƒ±rlayƒ±r
            news_content = f"""
Ba≈ülƒ±q: {news_item.title}
M…ônb…ô: {news_item.source}
M…ôzmun: {news_item.content[:500]}
URL: {news_item.url}
"""
            
            # AI promptunu hazƒ±rlayƒ±r
            prompt = AI_SETTINGS['analysis_prompt'].format(news_content=news_content)
            
            # Gemini API √ßaƒüƒ±rƒ±r
            response = self._call_gemini(prompt)
            
            if response:
                return response
            else:
                return self._fallback_analysis(news_item)
                
        except Exception as e:
            logger.error(f"AI analiz x…ôtasƒ±: {e}")
            return self._fallback_analysis(news_item)
    
    def _call_gemini(self, prompt: str) -> Optional[str]:
        """Gemini API-ni sync √ßaƒüƒ±rƒ±r"""
        try:
            system_prompt = "Siz kripto x…ôb…ôrl…ôrini analiz ed…ôn m√ºt…ôx…ôssissiniz. Az…ôrbaycan dilind…ô cavab verin."
            full_prompt = f"{system_prompt}\n\n{prompt}"
            
            response = self.model.generate_content(
                full_prompt,
                generation_config=genai.types.GenerationConfig(
                    max_output_tokens=AI_SETTINGS['max_tokens'],
                    temperature=AI_SETTINGS['temperature']
                )
            )
            
            if response and hasattr(response, 'text') and response.text:
                return response.text.strip()
            else:
                return None
            
        except Exception as e:
            logger.error(f"Gemini API x…ôtasƒ±: {e}")
            return None
    
    def _fallback_analysis(self, news_item: NewsItem) -> str:
        """AI …ôl√ßatmaz olduqda …ôsas analiz"""
        try:
            title_lower = news_item.title.lower()
            content_lower = news_item.content.lower()
            
            # A√ßar s√∂zl…ôr…ô …ôsas…ôn analiz
            bullish_keywords = [
                'rise', 'surge', 'pump', 'bull', 'green', 'gain', 'profit', 
                'moon', 'rocket', 'adoption', 'partnership', 'investment',
                'y√ºks…ôli≈ü', 'artƒ±m', 'qazanc', 't…ôr…ôqqi', 'inki≈üaf'
            ]
            
            bearish_keywords = [
                'fall', 'drop', 'crash', 'bear', 'red', 'loss', 'dump',
                'decline', 'down', 'fear', 'sell', 'panic',
                'd√º≈ü√º≈ü', 'azalma', 'itki', 't…ôn…ôzz√ºl', 'b√∂hran'
            ]
            
            neutral_keywords = [
                'stable', 'sideways', 'consolidation', 'analysis', 'report',
                'update', 'news', 'announcement', 'study',
                'sabit', 'hesabat', 'yenil…ônm…ô', 'elan'
            ]
            
            # Skor hesablayƒ±r
            bullish_score = sum(1 for word in bullish_keywords if word in title_lower or word in content_lower)
            bearish_score = sum(1 for word in bearish_keywords if word in title_lower or word in content_lower)
            neutral_score = sum(1 for word in neutral_keywords if word in title_lower or word in content_lower)
            
            # Market t…ôsirini m√º…ôyy…ôn edir
            if bullish_score > bearish_score and bullish_score > neutral_score:
                market_impact = "Bullish"
                risk_level = "Orta"
                analysis = "X…ôb…ôr kripto bazarƒ± √º√ß√ºn m√ºsb…ôt siqnallar g√∂nd…ôrir."
            elif bearish_score > bullish_score and bearish_score > neutral_score:
                market_impact = "Bearish"
                risk_level = "Y√ºks…ôk"
                analysis = "X…ôb…ôr bazarda m…ônfi t…ôsir g√∂st…ôr…ô bil…ôr."
            else:
                market_impact = "Neytral"
                risk_level = "A≈üaƒüƒ±"
                analysis = "X…ôb…ôr bazarda …ôh…ômiyy…ôtli d…ôyi≈üikliy…ô s…ôb…ôb olmaya bil…ôr."
            
            return f"""üî• Market T…ôsiri: {market_impact}
üìä Analiz: {analysis}
‚ö†Ô∏è Risk: {risk_level}"""
            
        except Exception as e:
            logger.error(f"Fallback analiz x…ôtasƒ±: {e}")
            return "üìä Analiz hazƒ±rlanark…ôn x…ôta ba≈ü verdi."
    
    def analyze_sentiment_keywords(self, text: str) -> Dict[str, int]:
        """M…ôtnin …ôhval-ruhiyy…ôsini a√ßar s√∂zl…ôr…ô g√∂r…ô analiz edir"""
        positive_keywords = [
            'good', 'great', 'excellent', 'positive', 'growth', 'increase',
            'success', 'win', 'benefit', 'opportunity', 'promising',
            'yax≈üƒ±', '…ôla', 'm√ºsb…ôt', 'b√∂y√ºm…ô', 'artƒ±m', 'uƒüur'
        ]
        
        negative_keywords = [
            'bad', 'terrible', 'negative', 'decrease', 'loss', 'fail',
            'problem', 'issue', 'concern', 'risk', 'danger',
            'pis', 'm…ônfi', 'azalma', 'itki', 'problem', 'risk'
        ]
        
        text_lower = text.lower()
        
        positive_count = sum(1 for word in positive_keywords if word in text_lower)
        negative_count = sum(1 for word in negative_keywords if word in text_lower)
        
        return {
            'positive': positive_count,
            'negative': negative_count,
            'neutral': max(0, len(text.split()) - positive_count - negative_count)
        } 